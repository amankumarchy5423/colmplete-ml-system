# Workflow Name
name: "infra-gitops"

# Workflow Triggers
on:
  push:
    branches:
      - iac-gitops
    paths:  
      - terraform/**

# Environment Variables
env:
  # AWS Credentials
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # S3 Bucket for Terraform State
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  AWS_REGION: us-east-2
  EKS_CLUSTER: vprofile-eks

# Define Jobs
jobs:
  terraform:
    name: "Deploy Infra with Terraform on AWS"
    runs-on: ubuntu-latest

    # Default settings for the job
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    # Steps in the job
    steps:
      # Step 1: Checkout Source Code
      - name: Checkout source code
        uses: actions/checkout@v4

      # Step 2: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Step 3: Terraform Init
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

      # Step 4: Terraform Format Check
      - name: Terraform format
        id: fmt
        run: terraform fmt -check

      # Step 5: Terraform Validate
      - name: Terraform validate
        id: validate
        run: terraform validate

      # Step 6: Terraform Plan
      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false -out planfile
        continue-on-error: true

      # Step 7: Check Terraform Plan Status
      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # Step 8: Terraform Apply
      - name: Terraform apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile

      # Step 9: Configure AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 10: Get Kubernetes Config File
      - name: Get Kubernetes config
        id: getconfig
        if: steps.apply.outcome == 'success'
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

      # Step 11: Install NGINX Ingress Controller
      - name: Install Ingress controller
        if: steps.apply.outcome == 'success' && steps.getconfig.outcome == 'success'
        run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.3/deploy/static/provider/aws/deploy.yaml
